/* tslint:disable */
/* eslint-disable */
/**
 * AddressBookService API
 * Define a service to expose HTTP endpoints for the address book.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PersonPhoneNumber } from './PersonPhoneNumber';
import {
    PersonPhoneNumberFromJSON,
    PersonPhoneNumberFromJSONTyped,
    PersonPhoneNumberToJSON,
    PersonPhoneNumberToJSONTyped,
} from './PersonPhoneNumber';

/**
 * 
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Person
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    email?: string;
    /**
     * 
     * @type {Array<PersonPhoneNumber>}
     * @memberof Person
     */
    phones?: Array<PersonPhoneNumber>;
    /**
     * 
     * @type {Date}
     * @memberof Person
     */
    lastUpdated?: Date;
}

/**
 * Check if a given object implements the Person interface.
 */
export function instanceOfPerson(value: object): value is Person {
    return true;
}

export function PersonFromJSON(json: any): Person {
    return PersonFromJSONTyped(json, false);
}

export function PersonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Person {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'id': json['id'] == null ? undefined : json['id'],
        'email': json['email'] == null ? undefined : json['email'],
        'phones': json['phones'] == null ? undefined : ((json['phones'] as Array<any>).map(PersonPhoneNumberFromJSON)),
        'lastUpdated': json['lastUpdated'] == null ? undefined : (new Date(json['lastUpdated'])),
    };
}

  export function PersonToJSON(json: any): Person {
      return PersonToJSONTyped(json, false);
  }

  export function PersonToJSONTyped(value?: Person | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'id': value['id'],
        'email': value['email'],
        'phones': value['phones'] == null ? undefined : ((value['phones'] as Array<any>).map(PersonPhoneNumberToJSON)),
        'lastUpdated': value['lastUpdated'] == null ? undefined : ((value['lastUpdated']).toISOString()),
    };
}

