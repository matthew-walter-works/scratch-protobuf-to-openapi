/* tslint:disable */
/* eslint-disable */
/**
 * AddressBookService API
 * Define a service to expose HTTP endpoints for the address book.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GoogleProtobufAny } from './GoogleProtobufAny';
import {
    GoogleProtobufAnyFromJSON,
    GoogleProtobufAnyFromJSONTyped,
    GoogleProtobufAnyToJSON,
    GoogleProtobufAnyToJSONTyped,
} from './GoogleProtobufAny';

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
     * @type {number}
     * @memberof Status
     */
    code?: number;
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
     * @type {string}
     * @memberof Status
     */
    message?: string;
    /**
     * A list of messages that carry the error details.  There is a common set of message types for APIs to use.
     * @type {Array<GoogleProtobufAny>}
     * @memberof Status
     */
    details?: Array<GoogleProtobufAny>;
}

/**
 * Check if a given object implements the Status interface.
 */
export function instanceOfStatus(value: object): value is Status {
    return true;
}

export function StatusFromJSON(json: any): Status {
    return StatusFromJSONTyped(json, false);
}

export function StatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): Status {
    if (json == null) {
        return json;
    }
    return {
        
        'code': json['code'] == null ? undefined : json['code'],
        'message': json['message'] == null ? undefined : json['message'],
        'details': json['details'] == null ? undefined : ((json['details'] as Array<any>).map(GoogleProtobufAnyFromJSON)),
    };
}

  export function StatusToJSON(json: any): Status {
      return StatusToJSONTyped(json, false);
  }

  export function StatusToJSONTyped(value?: Status | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'code': value['code'],
        'message': value['message'],
        'details': value['details'] == null ? undefined : ((value['details'] as Array<any>).map(GoogleProtobufAnyToJSON)),
    };
}

