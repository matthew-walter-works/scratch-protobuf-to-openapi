/* tslint:disable */
/* eslint-disable */
/**
 * AddressBookService API
 * Define a service to expose HTTP endpoints for the address book.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddPersonResponse,
  AddressBook,
  Person,
  Status,
} from '../models/index';
import {
    AddPersonResponseFromJSON,
    AddPersonResponseToJSON,
    AddressBookFromJSON,
    AddressBookToJSON,
    PersonFromJSON,
    PersonToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface AddressBookServiceAddPersonRequest {
    person: Person;
}

export interface AddressBookServiceGetPersonRequest {
    id: number;
}

/**
 * 
 */
export class AddressBookServiceApi extends runtime.BaseAPI {

    /**
     * Add a new person to the address book
     */
    async addressBookServiceAddPersonRaw(requestParameters: AddressBookServiceAddPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPersonResponse>> {
        if (requestParameters['person'] == null) {
            throw new runtime.RequiredError(
                'person',
                'Required parameter "person" was null or undefined when calling addressBookServiceAddPerson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/person`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonToJSON(requestParameters['person']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPersonResponseFromJSON(jsonValue));
    }

    /**
     * Add a new person to the address book
     */
    async addressBookServiceAddPerson(requestParameters: AddressBookServiceAddPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPersonResponse> {
        const response = await this.addressBookServiceAddPersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a person by their ID
     */
    async addressBookServiceGetPersonRaw(requestParameters: AddressBookServiceGetPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Person>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addressBookServiceGetPerson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/person/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     * Get a person by their ID
     */
    async addressBookServiceGetPerson(requestParameters: AddressBookServiceGetPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Person> {
        const response = await this.addressBookServiceGetPersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all people in the address book
     */
    async addressBookServiceListPeopleRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressBook>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/people`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressBookFromJSON(jsonValue));
    }

    /**
     * List all people in the address book
     */
    async addressBookServiceListPeople(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressBook> {
        const response = await this.addressBookServiceListPeopleRaw(initOverrides);
        return await response.value();
    }

}
